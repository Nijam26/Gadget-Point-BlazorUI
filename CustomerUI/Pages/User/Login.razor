@page "/login"
@using CustomerUI.Account
@using CustomerUI.Services
@inject IAuthService AuthService
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Login</h3>

<EditForm Model="loginDto" OnValidSubmit="Loginmain">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginDto.Email" />
    </div>
    <div class="form-group">
        <label for="Password">Password</label>
        <InputText id="Password" type="password" class="form-control" @bind-Value="loginDto.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginDTO loginDto = new LoginDTO();

    private async Task Loginmain()
    {
        var user = await AuthService.Login(loginDto);
        var userAccount = userAccountService.GetByUserName(loginDto.Email);
        if (user != null)
        {
            var coustomAuthStateProvider = (CustomAuthentication)authStateProvider;
            await coustomAuthStateProvider.UpdateAuthenticationState(new LoginDTO
                {
                    Email = userAccount.Email,
                    Role = userAccount.Role
                });

            Navigation.NavigateTo("/", true);
        }
        else
        {
            // Handle login failure

            if (userAccount == null || userAccount.Password != loginDto.Password)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid User name or password");
                return;
            }
        }
    }
}